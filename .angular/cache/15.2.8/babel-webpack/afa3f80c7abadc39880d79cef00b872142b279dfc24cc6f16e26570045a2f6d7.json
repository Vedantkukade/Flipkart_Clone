{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.incMatBadge = new EventEmitter();\n    this.data = [];\n  }\n  AnyAddToCart(data) {\n    let cartArray = [];\n    let localUser = localStorage.getItem('localUser');\n    if (!localUser) {\n      localStorage.setItem('localUser', JSON.stringify([data]));\n      this.incMatBadge.emit([data]);\n    } else {\n      cartArray = JSON.parse(localUser);\n      cartArray.push(data);\n      localStorage.setItem('localUser', JSON.stringify(cartArray));\n    }\n    // this.data=cartArray;\n    this.incMatBadge.emit(cartArray);\n  }\n  returnData() {\n    let cartstore = localStorage.getItem('localUser');\n    let cartdata = cartstore && JSON.parse(cartstore);\n    return cartdata;\n  }\n  removeCartItem(ItemId) {\n    let Data = localStorage.getItem('localUser');\n    if (Data) {\n      let item = JSON.parse(Data);\n      item = item.filter(item => ItemId !== item.id);\n      if (ItemId.length == 0) {\n        localStorage.removeItem('localUser');\n      }\n      localStorage.setItem('localUser', JSON.stringify(item));\n      this.incMatBadge.emit(item);\n    }\n  }\n  addToUserCart(cartData) {\n    return this.http.post(\"http://localhost:3000/userCartItems\", cartData);\n  }\n  getUserCart(userId) {\n    return this.http.get(\"http://localhost:3000/userCartItems?userDataId=\" + userId, {\n      observe: 'response'\n    }).subscribe(res => {\n      if (res && res.body) {\n        this.incMatBadge.emit(res.body);\n      }\n    });\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;;;AAMxD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IADxB,gBAAW,GAAC,IAAIH,YAAY,EAAY;IAGxC,SAAI,GAAO,EAAE;EAF0B;EAIvCI,YAAY,CAACC,IAAQ;IAEnB,IAAIC,SAAS,GAAC,EAAE;IAChB,IAAIC,SAAS,GAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAE/C,IAAG,CAACF,SAAS,EAAC;MACZC,YAAY,CAACE,OAAO,CAAC,WAAW,EAACC,IAAI,CAACC,SAAS,CAAC,CAACP,IAAI,CAAC,CAAC,CAAC;MACxD,IAAI,CAACQ,WAAW,CAACC,IAAI,CAAC,CAACT,IAAI,CAAC,CAAC;KAC9B,MACG;MAEFC,SAAS,GAACK,IAAI,CAACI,KAAK,CAACR,SAAS,CAAC;MAC/BD,SAAS,CAACU,IAAI,CAACX,IAAI,CAAC;MAEpBG,YAAY,CAACE,OAAO,CAAC,WAAW,EAACC,IAAI,CAACC,SAAS,CAACN,SAAS,CAAC,CAAC;;IAI7D;IAEA,IAAI,CAACO,WAAW,CAACC,IAAI,CAACR,SAAS,CAAC;EAClC;EAEAW,UAAU;IAER,IAAIC,SAAS,GAACV,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIU,QAAQ,GAACD,SAAS,IAAIP,IAAI,CAACI,KAAK,CAACG,SAAS,CAAC;IAE/C,OAAOC,QAAQ;EAEjB;EAEAC,cAAc,CAACC,MAAU;IAEvB,IAAIC,IAAI,GAACd,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAE1C,IAAGa,IAAI,EAAC;MAEN,IAAIC,IAAI,GAASZ,IAAI,CAACI,KAAK,CAACO,IAAI,CAAC;MAEjCC,IAAI,GAACA,IAAI,CAACC,MAAM,CAAED,IAAQ,IAAGF,MAAM,KAAGE,IAAI,CAACE,EAAE,CAAC;MAE9C,IAAGJ,MAAM,CAACK,MAAM,IAAE,CAAC,EAAC;QAClBlB,YAAY,CAACmB,UAAU,CAAC,WAAW,CAAC;;MAGtCnB,YAAY,CAACE,OAAO,CAAC,WAAW,EAACC,IAAI,CAACC,SAAS,CAACW,IAAI,CAAC,CAAC;MACtD,IAAI,CAACV,WAAW,CAACC,IAAI,CAACS,IAAI,CAAC;;EAI/B;EAEAK,aAAa,CAACC,QAAY;IAExB,OAAO,IAAI,CAAC1B,IAAI,CAAC2B,IAAI,CAAM,qCAAqC,EAACD,QAAQ,CAAC;EAC5E;EAEAE,WAAW,CAACC,MAAU;IAEpB,OAAO,IAAI,CAAC7B,IAAI,CAAC8B,GAAG,CAAM,iDAAiD,GAACD,MAAM,EAAC;MAACE,OAAO,EAAC;IAAU,CAAC,CAAC,CAACC,SAAS,CAACC,GAAG,IAAE;MAExH,IAAGA,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAC;QAEjB,IAAI,CAACxB,WAAW,CAACC,IAAI,CAACsB,GAAG,CAACC,IAAI,CAAC;;IAGjC,CAAC,CAAC;EACJ;;AA3EWpC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqC,SAAXrC,WAAW;EAAAsC,YAFV;AAAM","names":["EventEmitter","CartService","constructor","http","AnyAddToCart","data","cartArray","localUser","localStorage","getItem","setItem","JSON","stringify","incMatBadge","emit","parse","push","returnData","cartstore","cartdata","removeCartItem","ItemId","Data","item","filter","id","length","removeItem","addToUserCart","cartData","post","getUserCart","userId","get","observe","subscribe","res","body","factory","providedIn"],"sourceRoot":"","sources":["C:\\Vedant\\Senwell\\Angular\\senwell\\Flipkart_Clone\\src\\app\\Modules\\home-module\\Services\\cart.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  incMatBadge=new EventEmitter<any | []>();\n  constructor(private http:HttpClient) { }\n\n  data:any[]=[]\n\n  AnyAddToCart(data:any){\n\n    let cartArray=[];\n    let localUser=localStorage.getItem('localUser');\n\n    if(!localUser){\n      localStorage.setItem('localUser',JSON.stringify([data]));\n      this.incMatBadge.emit([data]);\n    }\n    else{\n     \n      cartArray=JSON.parse(localUser);\n      cartArray.push(data);\n \n      localStorage.setItem('localUser',JSON.stringify(cartArray));\n     \n    }\n\n    // this.data=cartArray;\n    \n    this.incMatBadge.emit(cartArray);\n  }\n\n  returnData(){\n  \n    let cartstore=localStorage.getItem('localUser')\n    let cartdata=cartstore && JSON.parse(cartstore)\n\n    return cartdata\n \n  }\n\n  removeCartItem(ItemId:any){\n\n    let Data=localStorage.getItem('localUser')\n\n    if(Data){\n\n      let item:any[] = JSON.parse(Data);\n\n      item=item.filter((item:any)=>ItemId!==item.id);\n\n      if(ItemId.length==0){\n        localStorage.removeItem('localUser')\n      }\n  \n      localStorage.setItem('localUser',JSON.stringify(item));\n      this.incMatBadge.emit(item);\n    }\n\n  \n  }\n\n  addToUserCart(cartData:any):Observable<any>{\n\n    return this.http.post<any>(\"http://localhost:3000/userCartItems\",cartData);\n  }\n\n  getUserCart(userId:any){\n\n    return this.http.get<any>(\"http://localhost:3000/userCartItems?userDataId=\"+userId,{observe:'response'}).subscribe(res=>{\n\n    if(res && res.body){\n\n      this.incMatBadge.emit(res.body);\n    }\n\n    })\n  }\n  \n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}